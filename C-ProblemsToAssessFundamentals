1. Array Rotation
Task: Write a C function named ‘rotate’ that takes an array and its length as input and rotates the array in-place to the right by one position.

Input Format: The input will be an integer array and its length.

Constraints: The array length will be at least 1.

Sample Input: int arr[] = {1, 2, 3, 4, 5}; int n = 5;

Array after rotation: 5 1 2 3 4


#include <stdio.h>

void rotate(int arr[], int n ) 
{
    
    int temp = arr[n-1], i; 
    
    for (i = n-1; i>0; i--) 
    {
        arr[i] = arr[i-1];
    }
    arr[0] = temp;
    for ( int i =0; i<n; i++ )
    {
       printf("%d - ", arr[i]);
    }
}

int main() {
    
    int arr[] = {1, 2, 3, 4, 5};
    int n  = sizeof(arr)/sizeof(arr[0]);
    for ( int i =0; i<n; i++ )
    {
       printf("%d - \n", arr[i]);
    }
    
    rotate(arr, n);
    
    return 0;
}

==================================================================================================================================================================================
2. String Palindrome
Task: Write a C function named ‘isPalindrome’ that checks whether a given string is a palindrome or not.

Input Format: The input will be a string.

Constraints: The string will only contain alphanumeric characters.

Output Format: The function should return 1 if the string is a palindrome and 0 otherwise.

Sample Input: racecar

#include <stdio.h>
#include<string.h>

int isPalindrome(char* str) {
    
    int len = strlen(str);
    int mid = len/2;
    
    for ( int i =0, j=len-1; i<mid, j>mid; i++, j--)
    {
        if (str[i] != str[j]) {
            printf("String is not palindrome\n");
            return 0;
        }
    }
    return 1;
}

int main() {
    
    char s[] = "racecar"; 
    char stest[] = "company";
    
    int res = isPalindrome(s);
    printf("%d - %s\n", res, s);
    res= isPalindrome(stest);
    printf("%d - %s\n", res, stest);
    
    return 0;
}
==================================================================================================================================================================================
3. Linked List Reversal
Task: Write a C function called ‘reverseList’ that reverses a linked list.
Input Format: The input will be a pointer to the head of a singly linked list.
Sample Input: 1 -> 2 -> 3 -> 4 -> NULL
Linked list after rotation: 4 -> 3 -> 2 -> 1 -> NULL

#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    struct Node* link;
} Node;

void CreateNode(int data, Node** list) {
    Node *temp = (Node*)malloc(sizeof(Node));
    if (temp == NULL) {
        fprintf(stderr, "Memory allocation failed!\n");
        exit(EXIT_FAILURE);
    }
    
    temp->data = data;
    temp->link = NULL;
    
    if (*list == NULL) {
        *list = temp;
    } else {
        Node *current = *list;
        while (current->link != NULL) {
            current = current->link;
        }
        current->link = temp;
    }
}

void Cleanup(Node* list) {
    Node *current = list;
    Node *next;
    
    while (current != NULL) {
        next = current->link;
        free(current);
        current = next;
    }
}

void ReverseList(Node**list) {
    Node* prev   = NULL;

    Node* current = *list;

    Node* next = NULL;

    while (current != NULL) {

        next  = current->link;  

        current->link = prev;   

        prev = current;

        current = next;

    }

    *list = prev;
    
}

int main() {
    Node *list = NULL;
    CreateNode(1, &list);
    CreateNode(2, &list);
    CreateNode(3, &list);
    CreateNode(4, &list);
    CreateNode(5, &list);
    
    Node *current = list;
    while (current != NULL) {
        printf("Node: %d\n", current->data);
        current = current->link;
    }
    
    ReverseList(&list);
    current = list;
     while (current != NULL) {
        printf("Node: %d\n", current->data);
        current = current->link;
    }
    
    Cleanup(list);
    
    return 0;
}

==================================================================================================================================================================================
4. There is a series, , where the next term is the sum of pervious three terms. Given the first three terms of the series, , , and  respectively, you have to output the nth term of the series using recursion.

Recursive method for calculating nth term is given below.

Input Format

The first line contains a single integer, .

The next line contains 3 space-separated integers, , , and .


Print the nth term of the series, .
#include <stdio.h>

// Function to find the nth term of the series
int findNthTerm(int n, int a, int b, int c) {
    // Base cases
    if (n == 0) {
        return a;
    } else if (n == 1) {
        return b;
    } else if (n == 2) {
        return c;
    } else {
        // Recursive case
        return findNthTerm(n - 1, a, b, c) + findNthTerm(n - 2, a, b, c) + findNthTerm(n - 3, a, b, c);
    }
}

int main() {
    int n, a, b, c;

    // Input the first three terms and the value of n
    printf("Enter the first term (a): ");
    scanf("%d", &a);
    printf("Enter the second term (b): ");
    scanf("%d", &b);
    printf("Enter the third term (c): ");
    scanf("%d", &c);
    printf("Enter the value of n: ");
    scanf("%d", &n);

    // Check if n is non-negative
    if (n < 0) {
        printf("n must be a non-negative integer.\n");
        return 1;
    }

    // Calculate the nth term of the series using recursion
    int result = findNthTerm(n, a, b, c);

    // Output the result
    printf("The %dth term of the series is: %d\n", n, result);

    return 0;
}

==================================================================================================================================================================================
5. Reverse bits in a number 


#include <stdio.h>
#include <stdint.h>

// Function to reverse the bits of a given integer
unsigned int reverseBits(unsigned int num) {
    unsigned int reversed = 0; // Variable to hold the reversed bits
    int bitCount = sizeof(num) * 8; // Total number of bits in the integer

    for (int i = 0; i < bitCount; i++) {
        // Shift reversed bits left to make space for the next bit
        reversed <<= 1;
        
        // Extract the last bit of num and add it to reversed
        if (num & 1) {
            reversed |= 1;
        }
        
        // Shift num right to process the next bit
        num >>= 1;
    }
    return reversed;
}

int main() {
    unsigned int num = 13; // Example number
    printf("Original number: %u\n", num);
    unsigned int reversed = reverseBits(num);
    printf("Reversed bits: %u\n", reversed);
    return 0;
}

Example:
If the input number is 13 (binary: 0000000000001101 in 16 bits), the reversed output will be 2952790016 (binary: 10110000000000000000000000000000 in 32 bits).

==================================================================================================================================================================================
==================================================================================================================================================================================
